@page "/chess"
@inject IJSRuntime jsRuntime

    <div class="chess-body checkbox clearfix">
        <div class="chess">
            <div class="inner">
                @for (var i = 0; i < 19; i++)
                {
                    <div class="clearfix">
                        @for (var j = 0; j < 19; j++)
                        {
                            var tempI = i;
                            var tempJ = j;
                            <div class="cell" @onclick="(()=>play(tempI,tempJ))">
                                <span class="chess@(chess[i,j])"></span>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="side-bar">
            <div class="inner">
                <h3>五子棋</h3>
                <div class="form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exampleRadios" @onclick="PcXianshou" checked>
                        <label class="form-check-label" for="exampleRadios1">
                            电脑先手
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exampleRadios" @onclick="WoXianshou">
                        <label class="form-check-label" for="exampleRadios2">
                            我先手
                        </label>
                    </div>
                    <p>
                        <button class="btn btn-dark" @onclick="StartGame">
                            @if (playStatus == 0)
                            {
                                <text>开始</text>
                            }
                            else
                            {
                                <text>结束</text>
                            }
                        </button>
                    </p>
                </div>

                <p>@message</p>
            </div>
        </div>
    </div>

@code{
    /*
     * 19x19格子
     * 1为黑子  2为白子  1始终先手
     */
    private int score = 0;
    private string message = "";
    private int machineChesspiece = 1;
    private int myChesspiece = 2;
    private int xianshou = 1;
    private int playStatus = 0;

    private int[,] chess = new int[19, 19];
    protected override async Task OnInitializedAsync()
    {

    }

    public void PcXianshou()
    {
        xianshou = 1;
    }

    public void WoXianshou()
    {
        xianshou = 2;
    }

    public void play(int row, int cell)
    {

        if (chess[row, cell] != 0)
        {
            return;
        }
        if (playStatus != 1)
        {
            jsRuntime.InvokeAsync<string>("alert", "请先点击 开始 按钮");
            return;
        }
        chess[row, cell] = myChesspiece;

        MachinePlay(machineChesspiece);
        var isWin = IsWin(myChesspiece, row, cell);
        if (isWin)
        {
            jsRuntime.InvokeAsync<string>("alert", "恭喜您，您赢了");
            playStatus = 0;
            return;
        }
    }

    public void StartGame()
    {
        if (playStatus == 0)
        {
            playStatus = 1;
            chess = new int[19, 19];
            if (xianshou == 1)
            {
                machineChesspiece = 1;
                myChesspiece = 2;
                chess[9, 9] = machineChesspiece;
                message = "电脑:执黑子 \n我:执白子";
            }
            else
            {
                machineChesspiece = 2;
                myChesspiece = 1;
                message = "电脑:执白子 \n我:执黑子";
            }
        }
        else
        {
            playStatus = 0;
            chess = new int[19, 19];
        }
    }

    //机器下棋
    private void MachinePlay(int chesspiece)
    {
        //我方所有点的得分
        var myPoints = new List<Data.ValuedPoint>();

        //敌方所有点的得分
        var enemyPoints = new List<Data.ValuedPoint>();
        for (var i = 0; i < 19; i++)
        {
            for (var j = 0; j < 19; j++)
            {
                if (chess[i, j] == 0)
                {
                    var myP = GetValuedPoint(chesspiece, i, j);
                    myPoints.Add(myP);

                    var enemyP = GetValuedPoint((chesspiece == 1 ? 2 : 1), i, j);
                    enemyPoints.Add(enemyP);
                }
            }
        }

        //获取一个最值得下的点
        var myPoint = myPoints.OrderByDescending(it => it.Score).FirstOrDefault();

        //获取一个地方最值得下的点
        var enemyPoint = enemyPoints.OrderByDescending(it => it.Score).FirstOrDefault();
        if (myPoint != null && enemyPoint != null)
        {
            //如果敌方这个点的分数 比 我方分数还高，则抢占这个点
            if (myPoint.Score > enemyPoint.Score)
            {
                chess[myPoint.Point.Row, myPoint.Point.Cell] = chesspiece;
                var isWin = IsWin(machineChesspiece, myPoint.Point.Row, myPoint.Point.Cell);
                if (isWin)
                {
                    jsRuntime.InvokeAsync<string>("alert", "电脑赢了，您还需加油哦");
                    playStatus = 0;
                    return;
                }
            }
            else
            {
                chess[enemyPoint.Point.Row, enemyPoint.Point.Cell] = chesspiece;
                var isWin = IsWin(machineChesspiece, enemyPoint.Point.Row, enemyPoint.Point.Cell);
                if (isWin)
                {
                    jsRuntime.InvokeAsync<string>("alert", "电脑赢了，您还需加油哦");
                    playStatus = 0;
                    return;
                }
            }
        }
    }

    /// <summary>
    /// 判断是否赢了
    /// </summary>
    private bool IsWin(int chesspiece, int row, int cell)
    {
        {
            //横方向
            var i = 1;
            var score = 1;
            var rightValid = true;
            var leftValid = true;
            while (i <= 5)
            {
                var right = cell + i;
                var left = cell - i;
                if (rightValid && right < 19)
                {
                    if (chess[row, right] == chesspiece)
                    {
                        score++;
                        if (score >= 5)
                        {
                            return true;
                        }
                    }
                    else
                        rightValid = false;
                }
                if (leftValid && left >= 0)
                {
                    if (chess[row, left] == chesspiece)
                    {
                        score++;
                        if (score >= 5)
                        {
                            return true;
                        }

                    }
                    else
                    {
                        leftValid = false;
                    }
                }
                i++;

            }
        }
        {
            //纵方向
            var i = 1;
            var score = 1;
            var topValid = true;
            var bottomValid = true;
            while (i < 5)
            {
                var top = row - i;
                if (topValid && top >= 0)
                {
                    if (chess[top, cell] == chesspiece)
                    {
                        score++;
                        if (score >= 5)
                        {
                            return true;
                        }
                    }
                    else
                        topValid = false;
                }

                var bottom = row + i;
                if (bottomValid && bottom < 19)
                {
                    if (chess[bottom, cell] == chesspiece)
                    {
                        score++;
                        if (score >= 5)
                        {
                            return true;
                        }
                    }
                    else
                    {
                        bottomValid = false;
                    }
                }
                i++;
            }
        }
        {
            //撇方向
            var i = 1;
            var score = 1;
            var topValid = true;
            var bottomValid = true;
            while (i < 5)
            {
                var rightTopRow = row - i;
                var rightTopCell = cell + i;
                if (topValid && rightTopRow >= 0 && rightTopCell < 19)
                {
                    if (chess[rightTopRow, rightTopCell] == chesspiece)
                    {
                        score++;
                        if (score >= 5)
                        {
                            return true;
                        }
                    }
                    else
                        topValid = false;
                }

                var leftBottomRow = row + i;
                var leftBottomCell = cell - i;
                if (bottomValid && leftBottomRow < 19 && leftBottomCell >= 0)
                {
                    if (chess[leftBottomRow, leftBottomCell] == chesspiece)
                    {
                        score++;
                        if (score >= 5)
                        {
                            return true;
                        }
                    }
                    else
                    {
                        bottomValid = false;
                    }
                }
                i++;
            }
        }
        {
            //揦方向
            var i = 1;
            var score = 1;
            var topValid = true;
            var bottomValid = true;
            while (i < 5)
            {
                var leftTopRow = row - i;
                var leftTopCell = cell - i;
                if (topValid && leftTopRow >= 0 && leftTopCell >= 0)
                {
                    if (chess[leftTopRow, leftTopCell] == chesspiece)
                    {
                        score++;
                        if (score >= 5)
                        {
                            return true;
                        }
                    }
                    else
                        topValid = false;
                }

                var rightBottomRow = row + i;
                var rightBottomCell = cell + i;
                if (bottomValid && rightBottomRow < 19 && rightBottomCell < 19)
                {
                    if (chess[rightBottomRow, rightBottomCell] == chesspiece)
                    {
                        score++;
                        if (score >= 5)
                        {
                            return true;
                        }
                    }
                    else
                    {
                        bottomValid = false;
                    }
                }
                i++;
            }
        }
        return false;
    }


    /// <summary>
    /// 获取该点的价值分数
    /// </summary>
    /// <param name="chesspiece"></param>
    /// <param name="row"></param>
    /// <param name="cell"></param>
    /// <returns></returns>
    private Data.ValuedPoint GetValuedPoint(int chesspiece, int row, int cell)
    {
        var enemyChesspiece = chesspiece == 1 ? 2 : 1;
        var HScore = 0;
        var VScore = 0;
        var PScore = 0;
        var LScore = 0;
        {
            //横方向
            var i = 1;
            var score = 1;
            var validPlace = 0;
            var rightValid = true;
            var leftValid = true;
            var rightSpace = 0;
            var leftSpace = 0;
            var isDead = false;
            while (i < 5)
            {
                var right = cell + i;
                var left = cell - i;
                if (rightValid && right < 19)
                {
                    if (chess[row, right] == chesspiece)
                    {
                        if (rightSpace == 0)
                            score++;
                        validPlace++;
                    }
                    else if (chess[row, right] == 0)
                    {
                        rightSpace++;
                        validPlace++;
                    }
                    else if (chess[row, right] == enemyChesspiece)
                    {
                        rightValid = false;
                        if (rightSpace == 0)
                            isDead = true;
                    }
                }
                if (leftValid && left >= 0)
                {
                    if (chess[row, left] == chesspiece)
                    {
                        if (leftSpace == 0)
                            score++;
                        validPlace++;
                    }
                    else if (chess[row, left] == 0)
                    {
                        leftSpace++;
                        validPlace++;
                    }
                    else if (chess[row, left] == enemyChesspiece)
                    {
                        leftValid = false;
                        if (leftSpace == 0)
                            isDead = true;
                    }
                }
                i++;
            }
            if (score >= 5)
            {
                HScore = 100000;
            }
            if (score == 4)
            {
                if (!isDead)
                {
                    HScore = 80000;
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        HScore = 0;
                    }
                    else
                    {
                        HScore = 8000;
                    }
                }
            }
            if (score == 3)
            {
                if (!isDead)
                {
                    if (validPlace <= 4)
                    {
                        HScore = 0;
                    }
                    else
                    {
                        HScore = 4000;
                    }
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        HScore = 0;
                    }
                    else
                    {
                        HScore = 2000;
                    }
                }
            }
            if (score == 2)
            {
                if (!isDead)
                {
                    if (validPlace <= 4)
                    {
                        HScore = 0;
                    }
                    else
                    {
                        HScore = 600;
                    }
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        HScore = 0;
                    }
                    else
                    {
                        HScore = 300;
                    }
                }
            }
        }
        {
            //纵方向
            var i = 1;
            var score = 1;
            var validPlace = 0;
            var topValid = true;
            var bottomValid = true;
            var topSpace = 0;
            var bottomSpace = 0;
            var isDead = false;
            if (row == 3 && cell == 3 && chesspiece == 1)
            {

            }
            while (i < 5)
            {
                var top = row - i;
                if (topValid && top >= 0)
                {
                    if (chess[top, cell] == chesspiece)
                    {
                        if (topSpace == 0)
                            score++;
                        validPlace++;
                    }
                    else if (chess[top, cell] == 0)
                    {
                        topSpace++;
                        validPlace++;
                    }
                    else if (chess[top, cell] == enemyChesspiece)
                    {
                        topValid = false;
                        if (topSpace == 0)
                            isDead = true;
                    }
                }

                var bottom = row + i;
                if (bottomValid && bottom < 19)
                {
                    if (chess[bottom, cell] == chesspiece)
                    {
                        if (bottomSpace == 0)
                            score++;
                        validPlace++;
                    }
                    else if (chess[bottom, cell] == 0)
                    {
                        bottomSpace++;
                        validPlace++;
                    }
                    else if (chess[bottom, cell] == enemyChesspiece)
                    {
                        bottomValid = false;
                        if (bottomSpace == 0)
                            isDead = true;
                    }
                }
                i++;
            }
            if (score >= 5)
            {
                VScore = 100000;
            }
            if (score == 4)
            {
                if (!isDead)
                {
                    VScore = 80000;
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        VScore = 0;
                    }
                    else
                    {
                        VScore = 8000;
                    }
                }
            }
            if (score == 3)
            {
                if (!isDead)
                {
                    if (validPlace <= 4)
                    {
                        VScore = 0;
                    }
                    else
                    {
                        VScore = 4000;
                    }
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        VScore = 0;
                    }
                    else
                    {
                        VScore = 2000;
                    }
                }
            }
            if (score == 2)
            {
                if (!isDead)
                {
                    if (validPlace <= 4)
                    {
                        VScore = 0;
                    }
                    else
                    {
                        VScore = 600;
                    }
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        VScore = 0;
                    }
                    else
                    {
                        VScore = 300;
                    }
                }
            }
        }
        {
            //撇方向
            var i = 1;
            var score = 1;
            var validPlace = 0;
            var topValid = true;
            var bottomValid = true;
            var topSpace = 0;
            var bottomSpace = 0;
            var isDead = false;
            while (i < 5)
            {
                var rightTopRow = row - i;
                var rightTopCell = cell + i;
                if (topValid && rightTopRow >= 0 && rightTopCell < 19)
                {
                    if (chess[rightTopRow, rightTopCell] == chesspiece)
                    {
                        if (topSpace == 0)
                            score++;
                        validPlace++;
                    }
                    else if (chess[rightTopRow, rightTopCell] == 0)
                    {
                        topSpace++;
                        validPlace++;
                    }
                    else if (chess[rightTopRow, rightTopCell] == enemyChesspiece)
                    {
                        topValid = false;
                        if (topSpace == 0)
                            isDead = true;
                    }
                }

                var leftBottomRow = row + i;
                var leftBottomCell = cell - i;
                if (bottomValid && leftBottomRow < 19 && leftBottomCell >= 0)
                {
                    if (chess[leftBottomRow, leftBottomCell] == chesspiece)
                    {
                        if (bottomSpace == 0)
                            score++;
                        validPlace++;
                    }
                    else if (chess[leftBottomRow, leftBottomCell] == 0)
                    {
                        bottomSpace++;
                        validPlace++;
                    }
                    else if (chess[leftBottomRow, leftBottomCell] == enemyChesspiece)
                    {
                        bottomValid = false;
                        if (bottomSpace == 0)
                            isDead = true;
                    }
                }
                i++;
            }
            if (score >= 5)
            {
                PScore = 100000;
            }
            if (score == 4)
            {
                if (!isDead)
                {
                    PScore = 80000;
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        PScore = 0;
                    }
                    else
                    {
                        PScore = 9000;
                    }
                }
            }
            if (score == 3)
            {
                if (!isDead)
                {
                    if (validPlace <= 4)
                    {
                        PScore = 0;
                    }
                    else
                    {
                        PScore = 4500;
                    }
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        PScore = 0;
                    }
                    else
                    {
                        PScore = 3000;
                    }
                }
            }
            if (score == 2)
            {
                if (!isDead)
                {
                    if (validPlace <= 4)
                    {
                        PScore = 0;
                    }
                    else
                    {
                        PScore = 800;
                    }
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        PScore = 0;
                    }
                    else
                    {
                        PScore = 500;
                    }
                }
            }
        }
        {
            //揦方向
            var i = 1;
            var score = 1;
            var validPlace = 0;
            var topSpace = 0;
            var bottomSpace = 0;
            var topValid = true;
            var bottomValid = true;
            var isDead = false;
            while (i < 5)
            {
                var leftTopRow = row - i;
                var leftTopCell = cell - i;
                if (topValid && leftTopRow >= 0 && leftTopCell >= 0)
                {
                    if (chess[leftTopRow, leftTopCell] == chesspiece)
                    {
                        if (topSpace == 0)
                            score++;
                        validPlace++;
                    }
                    else if (chess[leftTopRow, leftTopCell] == 0)
                    {
                        topSpace++;
                        validPlace++;
                    }
                    else if (chess[leftTopRow, leftTopCell] == enemyChesspiece)
                    {
                        topValid = false;
                        if (topSpace == 0)
                            isDead = true;
                    }
                }

                var rightBottomRow = row + i;
                var rightBottomCell = cell + i;
                if (bottomValid && rightBottomRow < 19 && rightBottomCell < 19)
                {
                    if (chess[rightBottomRow, rightBottomCell] == chesspiece)
                    {
                        if (bottomSpace == 0)
                            score++;
                        validPlace++;
                    }
                    else if (chess[rightBottomRow, rightBottomCell] == 0)
                    {
                        bottomSpace++;
                        validPlace++;
                    }
                    else if (chess[rightBottomRow, rightBottomCell] == enemyChesspiece)
                    {
                        bottomValid = false;
                        if (bottomSpace == 0)
                            isDead = true;
                    }
                }
                i++;
            }
            if (score >= 5)
            {
                LScore = 100000;
            }
            if (score == 4)
            {
                if (!isDead)
                {
                    LScore = 80000;
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        LScore = 0;
                    }
                    else
                    {
                        LScore = 9000;
                    }
                }
            }
            if (score == 3)
            {
                if (!isDead)
                {
                    if (validPlace <= 4)
                    {
                        LScore = 0;
                    }
                    else
                    {
                        LScore = 4500;
                    }
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        LScore = 0;
                    }
                    else
                    {
                        LScore = 3000;
                    }
                }
            }
            if (score == 2)
            {
                if (!isDead)
                {
                    if (validPlace <= 4)
                    {
                        LScore = 0;
                    }
                    else
                    {
                        LScore = 800;
                    }
                }
                else
                {
                    if (validPlace <= 4)
                    {
                        LScore = 0;
                    }
                    else
                    {
                        LScore = 500;
                    }
                }
            }
        }
        return new Data.ValuedPoint()
        {
            Score = HScore + VScore + PScore + LScore,
            Point = new Data.Point
            {
                Row = row,
                Cell = cell
            }
        };
    }
}

